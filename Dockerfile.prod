<<<<<<< Updated upstream
# Multi-stage build for smaller production image
FROM node:20-alpine AS builder

=======
# Use Node.js 20 Alpine for smaller image size
FROM node:20-alpine

# Set working directory
>>>>>>> Stashed changes
WORKDIR /app

# Copy package files
COPY package*.json ./
<<<<<<< Updated upstream
RUN npm ci

# Copy source and build
COPY . .
RUN npm run build

# Production stage
FROM node:20-alpine AS production

WORKDIR /app

# Copy package files for production install
COPY package*.json ./
RUN npm ci --only=production && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/server ./server
COPY --from=builder /app/shared ./shared

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001
USER nextjs

# Expose port
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:3001/api/health || exit 1

# Start application
CMD ["node", "dist/index.js"]
=======

# Install all dependencies (including dev dependencies for build)
RUN npm ci

# Copy source code
COPY . .

# Build the application
RUN npm run build

# Remove dev dependencies after build
RUN npm prune --production

# Expose port 5000
EXPOSE 5000

# Don't set NODE_ENV here - let docker-compose control it
# ENV NODE_ENV=production

# Start the application
CMD ["npm", "start"]
>>>>>>> Stashed changes
