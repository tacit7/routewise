{
  "info": {
    "name": "RouteWise Phoenix Backend API",
    "description": "Comprehensive test collection for the RouteWise Phoenix backend API with JWT authentication",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:4001",
      "type": "string"
    },
    {
      "key": "jwtToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "tripId",
      "value": "",
      "type": "string"
    },
    {
      "key": "interestId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Health check returns 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has status field\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/health",
              "host": ["{{baseUrl}}"],
              "path": ["api", "health"]
            }
          }
        },
        {
          "name": "Register User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Registration successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains token and user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "    ",
                  "    // Store token and user ID for subsequent requests",
                  "    pm.collectionVariables.set('jwtToken', jsonData.token);",
                  "    pm.collectionVariables.set('userId', jsonData.user.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser{{$randomInt}}\",\n  \"email\": \"test{{$randomInt}}@example.com\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Login User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains token and user\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('token');",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    ",
                  "    // Update token for subsequent requests",
                  "    pm.collectionVariables.set('jwtToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"SecurePass123!\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Get Current User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Current user retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('user');",
                  "    pm.expect(jsonData.user).to.have.property('id');",
                  "    pm.expect(jsonData.user).to.have.property('username');",
                  "    pm.expect(jsonData.user).to.have.property('email');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/auth/me",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "me"]
            }
          }
        }
      ]
    },
    {
      "name": "Places API",
      "item": [
        {
          "name": "Search Places",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Places search successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains places array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('places');",
                  "    pm.expect(jsonData.places).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/places/search?query=restaurants&location=37.7749,-122.4194&radius=5000",
              "host": ["{{baseUrl}}"],
              "path": ["api", "places", "search"],
              "query": [
                {
                  "key": "query",
                  "value": "restaurants"
                },
                {
                  "key": "location",
                  "value": "37.7749,-122.4194"
                },
                {
                  "key": "radius",
                  "value": "5000"
                }
              ]
            }
          }
        },
        {
          "name": "Places Autocomplete",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Autocomplete successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains predictions\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('predictions');",
                  "    pm.expect(jsonData.predictions).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/places/autocomplete?input=San Francisco",
              "host": ["{{baseUrl}}"],
              "path": ["api", "places", "autocomplete"],
              "query": [
                {
                  "key": "input",
                  "value": "San Francisco"
                }
              ]
            }
          }
        },
        {
          "name": "Places Nearby",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Nearby places successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains places\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('places');",
                  "    pm.expect(jsonData.places).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/places/nearby?location=37.7749,-122.4194&radius=5000&type=restaurant",
              "host": ["{{baseUrl}}"],
              "path": ["api", "places", "nearby"],
              "query": [
                {
                  "key": "location",
                  "value": "37.7749,-122.4194"
                },
                {
                  "key": "radius",
                  "value": "5000"
                },
                {
                  "key": "type",
                  "value": "restaurant"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Routes API",
      "item": [
        {
          "name": "Calculate Route",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Route calculation successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains route data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('route');",
                  "    pm.expect(jsonData.route).to.have.property('distance');",
                  "    pm.expect(jsonData.route).to.have.property('duration');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"origin\": \"San Francisco, CA\",\n  \"destination\": \"Los Angeles, CA\",\n  \"waypoints\": [\"Monterey, CA\"],\n  \"travelMode\": \"driving\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/routes/calculate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "routes", "calculate"]
            }
          }
        },
        {
          "name": "Calculate Route from Wizard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Wizard route calculation successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains route data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('route');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"wizard_data\": {\n    \"startCity\": \"San Francisco, CA\",\n    \"endCity\": \"Los Angeles, CA\",\n    \"tripType\": \"leisure\",\n    \"transportation\": \"driving\",\n    \"dates\": {\n      \"startDate\": \"2024-08-15\",\n      \"endDate\": \"2024-08-17\"\n    },\n    \"preferences\": {\n      \"budget\": \"medium\",\n      \"interests\": [\"food\", \"nature\", \"culture\"]\n    }\n  },\n  \"calculate_route\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/routes/wizard",
              "host": ["{{baseUrl}}"],
              "path": ["api", "routes", "wizard"]
            }
          }
        },
        {
          "name": "Route Estimate",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Route estimate successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains estimate data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('estimate');",
                  "    pm.expect(jsonData.estimate).to.have.property('distance');",
                  "    pm.expect(jsonData.estimate).to.have.property('duration');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"origin\": \"San Francisco, CA\",\n  \"destination\": \"Los Angeles, CA\",\n  \"travelMode\": \"driving\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/routes/estimate",
              "host": ["{{baseUrl}}"],
              "path": ["api", "routes", "estimate"]
            }
          }
        }
      ]
    },
    {
      "name": "Trips API (Authenticated)",
      "item": [
        {
          "name": "Get Public Trips",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Public trips retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains trips array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('trips');",
                  "    pm.expect(jsonData.trips).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/trips/public",
              "host": ["{{baseUrl}}"],
              "path": ["api", "trips", "public"]
            }
          }
        },
        {
          "name": "Create Trip from Wizard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Trip creation successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains trip data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('trip');",
                  "    pm.expect(jsonData.trip).to.have.property('id');",
                  "    pm.expect(jsonData.trip).to.have.property('title');",
                  "    ",
                  "    // Store trip ID for subsequent requests",
                  "    pm.collectionVariables.set('tripId', jsonData.trip.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"wizard_data\": {\n    \"startCity\": \"San Francisco, CA\",\n    \"endCity\": \"Los Angeles, CA\",\n    \"tripType\": \"leisure\",\n    \"transportation\": \"driving\",\n    \"dates\": {\n      \"startDate\": \"2024-08-15\",\n      \"endDate\": \"2024-08-17\"\n    },\n    \"preferences\": {\n      \"budget\": \"medium\",\n      \"interests\": [\"food\", \"nature\", \"culture\"]\n    },\n    \"specialNeeds\": {\n      \"accessibility\": false,\n      \"dietaryRestrictions\": []\n    }\n  },\n  \"calculate_route\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/trips/from_wizard",
              "host": ["{{baseUrl}}"],
              "path": ["api", "trips", "from_wizard"]
            }
          }
        },
        {
          "name": "Get User Trips",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User trips retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains trips array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('trips');",
                  "    pm.expect(jsonData.trips).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/trips",
              "host": ["{{baseUrl}}"],
              "path": ["api", "trips"]
            }
          }
        },
        {
          "name": "Get Trip Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Trip details retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains trip data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('trip');",
                  "    pm.expect(jsonData.trip).to.have.property('id');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/trips/{{tripId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "trips", "{{tripId}}"]
            }
          }
        },
        {
          "name": "Update Trip",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Trip update successful\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains updated trip\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('trip');",
                  "    pm.expect(jsonData.trip).to.have.property('title');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Updated Trip Title\",\n  \"description\": \"Updated trip description\",\n  \"public\": false\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/trips/{{tripId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "trips", "{{tripId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "Interests API (Authenticated)",
      "item": [
        {
          "name": "Get Interest Categories",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Interest categories retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains categories\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('categories');",
                  "    pm.expect(jsonData.categories).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/interests/categories",
              "host": ["{{baseUrl}}"],
              "path": ["api", "interests", "categories"]
            }
          }
        },
        {
          "name": "Create User Interest",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Interest creation successful\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response contains interest data\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('interest');",
                  "    pm.expect(jsonData.interest).to.have.property('id');",
                  "    ",
                  "    // Store interest ID for subsequent requests",
                  "    pm.collectionVariables.set('interestId', jsonData.interest.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"category_name\": \"food\",\n  \"priority\": 5,\n  \"active\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/interests",
              "host": ["{{baseUrl}}"],
              "path": ["api", "interests"]
            }
          }
        },
        {
          "name": "Get User Interests",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User interests retrieved\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains interests array\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('interests');",
                  "    pm.expect(jsonData.interests).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwtToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/interests",
              "host": ["{{baseUrl}}"],
              "path": ["api", "interests"]
            }
          }
        }
      ]
    },
    {
      "name": "Error Cases",
      "item": [
        {
          "name": "Unauthorized Request",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Unauthorized access blocked\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/trips",
              "host": ["{{baseUrl}}"],
              "path": ["api", "trips"]
            }
          }
        },
        {
          "name": "Invalid Registration Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Validation error returned\", function () {",
                  "    pm.response.to.have.status(422);",
                  "});",
                  "",
                  "pm.test(\"Error details present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('errors');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"a\",\n  \"email\": \"invalid-email\",\n  \"password\": \"weak\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Invalid Login Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Login failed with invalid credentials\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Error message present\", function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"nonexistentuser\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        }
      ]
    }
  ]
}